service: serverless-sub-routing

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: eu-west-1
  environment:
    DEFECTS_DDB_TABLE_NAME: defects-local
    REQUIRED_STANDARDS_DDB_TABLE_NAME: required-standards-local
    DDB_OFFLINE_ENDPOINT: http://localhost:8000
    AWS_ACCESS_KEY_ID: accessKeyId
    AWS_SECRET_ACCESS_KEY: secretAccessKey

functions:
  app:
    handler: dist/lambda.handler
    events:
      - http:
          path: /{proxy+}
          method: any

custom:
  dynamodb:
    stages:
      - test
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: ${self:provider.environment.DEFECTS_DDB_TABLE_NAME}
            sources: [./tests/test-data/dynamo-seed-defects.json]
          - table: ${self:provider.environment.REQUIRED_STANDARDS_DDB_TABLE_NAME}
            sources: [./tests/test-data/dynamo-seed-required-standards.json]

resources:
  Resources:
    defects:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DEFECTS_DDB_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    requiredStandards:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.REQUIRED_STANDARDS_DDB_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: euVehicleCategory
            AttributeType: S
          - AttributeName: sectionNumber
            AttributeType: S
        KeySchema:
          - AttributeName: euVehicleCategory
            KeyType: HASH
          - AttributeName: sectionNumber
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

plugins:
  - serverless-dotenv-plugin
  - serverless-dynamodb
  - serverless-offline
